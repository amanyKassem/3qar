import React from "react";import {View, Text, TouchableOpacity, Image, Dimensions, I18nManager} from 'react-native';import COLORS from "../consts/colors";import { createStackNavigator } from '@react-navigation/stack';import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';import {createDrawerNavigator, DrawerContentScrollView, DrawerItem,DrawerItemList} from '@react-navigation/drawer';import styles from '../../assets/styles'import {useDispatch, useSelector} from "react-redux";import {logout, tempAuth} from '../actions';import i18n from "../../locale/i18n";import Home                     from "../components/Home";import Areas                    from "../components/Areas";import MyLocation               from "../components/MyLocation";import Conversations            from "../components/Conversations";import Profile            		from "../components/Profile";const height = Dimensions.get('window').height;const MainStack  = createStackNavigator();const HomeStack  = createStackNavigator();const Drawer 	 = createDrawerNavigator();const Tabs   	 = createBottomTabNavigator();export function HomeStackStackNavigator()  {	return(		<HomeStack.Navigator mode={'card'} screenOptions={{headerShown: false}} initialRouteName="home" >			<HomeStack.Screen name='home' options={{headerShown:false}} component={Home}/>		</HomeStack.Navigator>	);}function TabsScreen() {	return (		<Tabs.Navigator			// initialRouteName="homeStack"			tabBarOptions={{				activeTintColor: COLORS.black,				style: styles.footerStyle,				tabStyle : {alignSelf:"center"}			}}		>			<Tabs.Screen				name="homeStack"				component={HomeStackStackNavigator}				options={{					tabBarLabel: ({ color, focused }) => (						<View style={[styles.directionRowCenter , focused ? styles.activeTab : styles.unActiveTab, styles.Width_100]}>							<Image source={color === COLORS.black ? require('../../assets/images/green_home.png') : require('../../assets/images/gray_home.png')} style={[styles.icon20]} resizeMode={'contain'} />						</View>					),				}}			/>			<Tabs.Screen				name="areas"				component={Areas}				options={{					tabBarLabel: ({ color, focused }) => (						<View style={[styles.directionRowCenter , focused ? styles.activeTab : styles.unActiveTab, styles.Width_100]}>							<Image source={color === COLORS.black ? require('../../assets/images/green_map.png') : require('../../assets/images/gray_map.png')} style={[styles.icon20]} resizeMode={'contain'} />						</View>					),				}}			/>			<Tabs.Screen				name="myLocation"				component={MyLocation}				options={{					tabBarLabel: ({ color, focused }) => (						<View style={[styles.directionRowCenter , focused ? styles.activeTab : styles.unActiveTab, styles.Width_100]}>							<Image source={color === COLORS.black ? require('../../assets/images/green_location.png') : require('../../assets/images/gray_location.png')} style={[styles.icon20]} resizeMode={'contain'} />						</View>					),				}}			/>			<Tabs.Screen				name="conversations"				component={Conversations}				options={{					tabBarLabel: ({ color, focused }) => (						<View style={[styles.directionRowCenter , focused ? styles.activeTab : styles.unActiveTab, styles.Width_100]}>							<Image source={color === COLORS.black ? require('../../assets/images/green_chat.png') : require('../../assets/images/gray_message.png')} style={[styles.icon20]} resizeMode={'contain'} />						</View>					),				}}			/>			<Tabs.Screen				name="profile"				component={Profile}				options={{					tabBarLabel: ({ color, focused }) => (						<View style={[styles.directionRowCenter , focused ? styles.activeTab : styles.unActiveTab, styles.Width_100]}>							<Image source={color === COLORS.black ? require('../../assets/images/green_user.png') : require('../../assets/images/gray_profile.png')} style={[styles.icon20]} resizeMode={'contain'} />						</View>					),					tabBarVisible: false,				}}			/>		</Tabs.Navigator>	);}function CustomDrawerContent(props) {    const lang  = useSelector(state => state.lang.lang);    // const auth = useSelector(state => state.auth);    // const token = useSelector(state => state.auth.user ? state.auth.user.data.token : null);    // const dispatch  = useDispatch();    //    // function logoutFunc(){    //     dispatch(logout(lang , token));    //     dispatch(tempAuth(token));    // }	return (		<DrawerContentScrollView {...props} style={[styles.bg_green]}>			<View style={[styles.marginHorizontal_15 , styles.directionRowSpace]}>				<TouchableOpacity onPress={() => props.navigation.closeDrawer()}>					<Image source={require('../../assets/images/menu.png')} style={[styles.icon20]} resizeMode={'contain'} />				</TouchableOpacity>			</View>            <View style={[styles.bgFullWidth,styles.bg_White, styles.paddingTop_30, styles.marginTop_15,                {borderTopRightRadius:50 , borderTopLeftRadius:50 , minHeight:height-143}]}>			    {/*<DrawerItemList {...props} />*/}                <DrawerItem                    style={[styles.borderBottomGray, {marginHorizontal:0}]}                    label={                        ({ focused, color }) => {                            return (                                <Text style={[styles.textRegular, styles.text_gray , styles.textSize_15, styles.alignStart , {writingDirection: I18nManager.isRTL ? 'rtl' : 'ltr' , right:15}]}>{ i18n.t('home') }</Text>                            )                        }                    }                    icon={                        ({ focused, color }) => {                            return (                                <Image source={require('../../assets/images/gray_home.png')} style={[styles.icon20]} resizeMode={'contain'} />                            )                        }                    }                    onPress={() => props. navigation.navigate('tabs', {                        screen: 'homeStack'                    })}                />            </View>		</DrawerContentScrollView>	);}function MyDrawer() {	return (		<Drawer.Navigator			initialRouteName="tabs"			drawerStyle={[styles.Width_100]}            drawerContentOptions={{                itemStyle: [styles.borderBottomGray , styles.paddingHorizontal_15 , { backgroundColor: 'transparent' , marginHorizontal:0}],                labelStyle: [styles.textRegular ,{color:COLORS.black }],            }}			drawerContent={(props) => <CustomDrawerContent {...props} />}>            <Drawer.Screen name="tabs" component={TabsScreen} options={{ drawerLabel:  i18n.t('home')  }}/>        </Drawer.Navigator>	);}export function MainStackNavigator()  {	return(		<MainStack.Navigator mode={'card'} screenOptions={{headerShown: false}}  >			<MainStack.Screen name='myDrawer' options={{headerShown:false}} component={MyDrawer}/>		</MainStack.Navigator>	);}